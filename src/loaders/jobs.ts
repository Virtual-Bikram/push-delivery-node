// Do Scheduling
// https://github.com/node-schedule/node-schedule
// *    *    *    *    *    *
// ‚î¨    ‚î¨    ‚î¨    ‚î¨    ‚î¨    ‚î¨
// ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ
// ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îî day of week (0 - 7) (0 or 7 is Sun)
// ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1 - 12)
// ‚îÇ    ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of month (1 - 31)
// ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
// ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0 - 59)
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ second (0 - 59, OPTIONAL)
// Execute a cron job every 5 Minutes = */5 * * * *
// Starts from seconds = * * * * * *
import {
    Container
} from 'typedi';
import schedule from 'node-schedule';
import MessagingService from '../services/pushMessageService';

export default ({
    logger
}) => {


    // 1. MESSAGING SERVICE
    // Schedule payloads data population for unprocessed payloads
    logger.info('-- üõµ Scheduling Messaging Processing [Every 1 Min]');
    schedule.scheduleJob('*/1 * * * *', async function() {
        const messaging = Container.get(MessagingService);
        const taskName = 'Messages Processed';
        try {
             await messaging.batchProcessMessages();
             logger.info(`üê£ Cron Task Completed -- ${taskName}`);
        } catch (err) {
            logger.error(`‚ùå Cron Task Failed -- ${taskName}`);
            logger.error(`Error Object: %o`, err);
        }
    });


    // 2. DELETE STALE MESSAGES
    //This cron job deletes all the messages which could not be delivered after the max 
    //attempts threshold hits, only after X days.
    logger.info('-- üõµ Scheduling DELETE STALE MESSAGES Job [Every 360 Mins]');
    schedule.scheduleJob('*/360 * * * *', async function() {
        const messaging = Container.get(MessagingService);
        const taskName = 'Delete Stale Messages';
        try {
            await messaging.deleteStaleMessages();
            logger.info(`üê£ Cron Task Completed -- ${taskName}`);
        } catch (err) {
            logger.error(`‚ùå Cron Task Failed -- ${taskName}`);
            logger.error(`Error Object: %o`, err);
        }
    });
};